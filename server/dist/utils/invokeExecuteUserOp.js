"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signUserOp = signUserOp;
exports.executeUserOp = executeUserOp;
exports.getUserOperationGasPrice = getUserOperationGasPrice;
const axios_1 = __importDefault(require("axios"));
const accounts_1 = require("viem/accounts");
const viem_1 = require("viem");
const generateUserOp_js_1 = require("./generateUserOp.js");
/**
 * Signs a user operation
 *
 * This function converts a user operation to its packed format, generates a hash,
 * and signs it using the provided session private key.
 *
 * @param userop - The user operation object containing all transaction details such as:
 *                 sender, nonce, callData, gas parameters, etc.
 * @param sessionConfig - Configuration containing session credentials:
 *                       - sessionPrivKey: The private key used for signing
 *                       - sessionPubkey: The corresponding public key
 *                       - userSWA: The user's Smart Wallet Account address
 *
 * @returns The original user operation with the signature field added
 */
function signUserOp(userop, sessionConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const privateKey = sessionConfig.sessionPrivKey;
        const packeduserop = (0, generateUserOp_js_1.generatePackedUserOp)(userop);
        const hash = (0, generateUserOp_js_1.generateUserOpHash)(packeduserop);
        const sig = yield (0, accounts_1.signMessage)({
            message: {
                raw: (0, viem_1.fromHex)(hash, "bytes"),
            },
            privateKey,
        });
        userop.signature = sig;
        return userop;
    });
}
/**
 * Execute a user operation
 *
 * This function sends the signed user operation to Okto's gateway for execution
 * using a JSON-RPC request.
 *
 * @param userop - The signed user operation object containing all transaction details
 *                and the signature generated by signUserOp
 * @param authToken - Authentication token for Okto's API, generated from getAuthorizationToken
 *
 * @returns The job ID that can be used to track the transaction's status
 *
 */
function executeUserOp(userop, authToken) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log("execute request payload: ", userop);
            console.log("finally sending the axios request for execute...........");
            const response = yield axios_1.default.post("https://sandbox-api.okto.tech/api/oc/v1/execute", userop, {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`,
                },
            });
            return response.data.data.jobId;
        }
        catch (error) {
            console.error("Error executing user operation:", error);
            throw error;
        }
    });
}
function getUserOperationGasPrice(authToken) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const response = yield axios_1.default.get("https://sandbox-api.okto.tech/api/oc/v1/gas-values", {
            headers: {
                Authorization: `Bearer ${authToken}`,
            },
        });
        console.log("Gas Price Response:", response.data);
        return (_a = response.data) === null || _a === void 0 ? void 0 : _a.data;
    });
}
